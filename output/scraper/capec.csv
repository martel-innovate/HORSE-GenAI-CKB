attacks,mitigations
Session Credential Falsification through Manipulation,[]
Session Credential Falsification through Prediction,"['Use a strong source of randomness to generate a session ID. ', 'Use adequate length session IDs ', 'Do not use information available to the user in order to generate session ID (e.g., time). ', 'Ideas for creating random numbers are offered by Eastlake [RFC1750] ', 'Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format. ']"
Session Sidejacking,"['Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel. ', 'Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks. ']"
Cross Site Tracing,"[""Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default. "", 'Patch web browser against known security origin policy bypass exploits. ']"
Reusing Session IDs (aka Session Replay),"['Always invalidate a session ID after the user logout. ', 'Setup a session time out for the session IDs. ', 'Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (<a href=""/data/definitions/94.html"">CAPEC-94</a>). ', 'Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker. ', 'Encrypt the session data associated with the session ID. ', 'Use multifactor authentication. ']"
Session Fixation,"['Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice. ', 'Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes. ', 'Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult. ']"
Cross Site Identification,"['Usage: Users should always explicitly log out from the social networking sites when done using them. ', 'Usage: Users should not open other tabs in the browser when using a social networking site. ']"
"Removal of filters: Input filters, output filters, data masking",[]
Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements,[]
Subverting Environment Variable Values,"['Protect environment variables against unauthorized read and write access. ', 'Protect the configuration files which contain environment variables against illegitimate read and write access. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. ', 'Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege. ']"
Manipulating Hidden Fields,[]
Leveraging Race Conditions via Symbolic Links,"['Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing. ', 'Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. ', 'Follow the principle of least privilege when assigning access rights to files. ', 'Ensure good compartmentalization in the system to provide protected areas that can be trusted. ']"
Fuzzing for application mapping,"[""Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. "", ""Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. "", 'Implementation: Obfuscate server fields of HTTP response. ', 'Implementation: Hide inner ordering of HTTP response header. ', 'Implementation: Customizing HTTP error codes such as 404 or 500. ', 'Implementation: Hide HTTP response header software information filed. ', ""Implementation: Hide cookie's software information filed. "", ""Implementation: Obfuscate database type in Database API's error message. ""]"
Load Value Injection,"['Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice. ', 'Insert explicit lfence speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded. ']"
Transaction or Event Tampering via Application API Manipulation,[]
Content Spoofing Via Application API Manipulation,[]
Navigation Remapping To Propagate Malicious Content,[]
Application API Button Hijacking,[]
Dictionary-based Password Attack,"['Create a strong password policy and ensure that your system enforces this policy. ', 'Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as <a href=""/data/definitions/2.html"">CAPEC-2</a>. ', 'Leverage multi-factor authentication for all authentication services. ']"
Rainbow Table Password Cracking,"['Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it. ']"
Password Spraying,"['Create a strong password policy and ensure that your system enforces this policy. ', 'Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as <a href=""/data/definitions/2.html"">CAPEC-2</a>. ', 'Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. ']"
Try Common or Default Usernames and Passwords,"['Delete all default account credentials that may be put in by the product vendor. ', 'Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. ', 'Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. ', 'Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen. ']"
Root/Jailbreak Detection Evasion via Debugging,['Instantiate checks within the application code that ensures debuggers are not attached. ']
Escaping a Sandbox by Calling Code in Another Language,"['Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them. ', 'Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries. ', 'Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library. ', 'Configuration: Get latest updates for the computer. ']"
Detect Unpublicized Web Pages,[]
Detect Unpublicized Web Services,[]
Screen Temporary Files for Sensitive Information,[]
Collect Data from Clipboard,"['While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality. ', 'Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern. ']"
Collect Data from Registries,"['Employ a robust and layered defensive posture in order to prevent unauthorized users on your system. ', 'Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern. ']"
Collect Data from Screen Capture,"['Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools. ', 'While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature. ']"
Directory Indexing,"['1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors. ', '2. Preventing with .htaccess in Apache web server: In .htaccess, write ""Options-indexes"". ', '3. Suppressing error messages: using error 403 ""Forbidden"" message exactly like error 404 ""Not Found"" message. ']"
Fuzzing for application mapping,"[""Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. "", ""Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. "", 'Implementation: Obfuscate server fields of HTTP response. ', 'Implementation: Hide inner ordering of HTTP response header. ', 'Implementation: Customizing HTTP error codes such as 404 or 500. ', 'Implementation: Hide HTTP response header software information filed. ', ""Implementation: Hide cookie's software information filed. "", ""Implementation: Obfuscate database type in Database API's error message. ""]"
Fuzzing for garnering other adjacent user/sensitive data,[]
Cross-Domain Search Timing,"[""Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests "", ""Design: The browser's security model could be fixed to not leak timing information for cross domain requests ""]"
WSDL Scanning,"['It is important to protect WSDL file or provide limited access to it. ', 'Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection. ', 'Ensure the WSDL does not expose functions and APIs that were not intended to be exposed. ', 'Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack. ', 'Validate the received messages against the WSDL Schema. Incomplete solution. ']"
Probe iOS Screenshots,"[""To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods. ""]"
Incomplete Data Deletion in a Multi-Tenant Environment,"['Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources. ', 'Deletion of data should be completed promptly when requested. ']"
Probe Audio and Video Peripherals,"['Prevent unknown code from executing on a system through the use of an allowlist policy. ', 'Patch installed applications as soon as new updates become available. ']"
Probe System Files,"['Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary. ']"
Capture Credentials via Keylogger,['Strong physical security can help reduce the ability of an adversary to install a keylogger. ']
Sniffing Network Traffic,"['Obfuscate network traffic through encryption to prevent its readability by network sniffers. ', 'Employ appropriate levels of segmentation to your network in accordance with best practices. ']"
Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,"['Implementation: Implement message level security such as HMAC in the HTTP communication ', 'Design: Utilize defense in depth, do not rely on a single security mechanism like SSL ', 'Design: Enforce principle of least privilege ']"
Sniff Application Code,"['Design: Encrypt all communication between the client and server. ', 'Implementation: Use SSL, SSH, SCP. ', 'Operation: Use ""ifconfig/ipconfig"" or other tools to detect the sniffer installed in the network. ']"
Android Activity Hijack,"[""To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls). "", 'Never use implicit intents for inter-application communication. ']"
Probe Audio and Video Peripherals,"['Prevent unknown code from executing on a system through the use of an allowlist policy. ', 'Patch installed applications as soon as new updates become available. ']"
Restful Privilege Elevation,"['Design: Enforce principle of least privilege ', 'Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side ', 'Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose ']"
Create files with the same name as files protected with a higher classification,[]
Force Use of Corrupted Files,[]
Modify Shared File,['Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run. ']
Add Malicious File to Shared Webroot,['Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems. ']
Replace Binaries,['Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services. ']
Upload a Web Shell to a Web Server,"['Make sure your web server is up-to-date with all patches to protect against known vulnerabilities. ', 'Ensure that the file permissions in directories on the web server from which files can be execute is set to the ""least privilege"" settings, and that those directories contents is controlled by an allowlist. ']"
Restful Privilege Elevation,"['Design: Enforce principle of least privilege ', 'Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side ', 'Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose ']"
Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,"['Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels ', 'Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users ']"
Serialized Data External Linking,['Configure the serialized data processor to only retrieve external entities from trusted sources. ']
Buffer Overflow via Environment Variables,"['Do not expose environment variable to the user. ', 'Do not use untrusted data in your environment variables. ', 'Use a language or compiler that performs automatic bounds checking ', 'There are tools such as Sharefuzz [<a href=""#REF-2"">REF-2</a>] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow. ']"
Client-side Injection-induced Buffer Overflow,"['The client software should not install untrusted code from a non-authenticated server. ', 'The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers. ', 'Perform input validation for length of buffer inputs. ', 'Use a language or compiler that performs automatic bounds checking. ', 'Use an abstraction library to abstract away risky APIs. Not a complete solution. ', 'Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Ensure all buffer uses are consistently bounds-checked. ', 'Use OS-level preventative functionality. Not a complete solution. ']"
Filter Failure through Buffer Overflow,"['Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs. ', 'Pre-design: Use a language or compiler that performs automatic bounds checking. ', 'Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Operational: Use OS-level preventative functionality. Not a complete solution. ', 'Design: Use an abstraction library to abstract away risky APIs. Not a complete solution. ']"
SOAP Array Overflow,"['If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for. ']"
MIME Conversion,"['Stay up to date with third party vendor patches ', '<p>Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. </p><p>For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): </p><div style=""margin-left:1em;"" class=""informative"">Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40, <div style=""margin-left:1em;"">T=DNS/RFC822/X-Unix, <br>A=mail -d $u </div><br>Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40, <div style=""margin-left:1em;"">D=$z:/, <br>T=X-Unix, <br>A=sh -c $u </div></div><p>This can be achieved for the ""Mlocal"" and ""Mprog"" Mailers by modifying the "".mc"" file to include the following lines: </p><div style=""margin-left:1em;"" class=""informative"">define(`LOCAL_MAILER_FLAGS\', <div style=""margin-left:1em;"">ifdef(`LOCAL_MAILER_FLAGS\', <div style=""margin-left:1em;"">`translit(LOCAL_MAILER_FLAGS, `9\')\', <br>`rmn\')) </div></div><br>define(`LOCAL_SHELL_FLAGS\', <div style=""margin-left:1em;"">ifdef(`LOCAL_SHELL_FLAGS\', <div style=""margin-left:1em;"">`translit(LOCAL_SHELL_FLAGS, `9\')\', <br>`eu\')) </div></div></div><p>and then rebuilding the sendmail.cf file using m4(1). </p><p>From ""Exploiting Software"", please see reference below. </p>', 'Use the sendmail restricted shell program (smrsh) ', 'Use mail.local ']"
Overflow Binary Resource File,"['Perform appropriate bounds checking on all buffers. ', 'Design: Enforce principle of least privilege ', 'Design: Static code analysis ', 'Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes ', 'Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host. ']"
Buffer Overflow via Symbolic Links,"['Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource. ', 'Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories. ', 'Pay attention to the resource pointed to by your symlink links (See attack pattern named ""Forced Symlink race""), they can be replaced by malicious resources. ', 'Always check the size of the input data before copying to a buffer. ', 'Use a language or compiler that performs automatic bounds checking. ', 'Use an abstraction library to abstract away risky APIs. Not a complete solution. ', 'Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Use OS-level preventative functionality. Not a complete solution. ']"
Overflow Variables and Tags,"['Use a language or compiler that performs automatic bounds checking. ', 'Use an abstraction library to abstract away risky APIs. Not a complete solution. ', 'Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Use OS-level preventative functionality. Not a complete solution. ', 'Do not trust input data from user. Validate all user input. ']"
Buffer Overflow via Parameter Expansion,['Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system ']
String Format Overflow in syslog(),"['<p>The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): </p><div style=""margin-left:1em;"" class=""good"">syslog(LOG_ERR, ""%s"", cmdBuf); </div><p>The following code shows a vulnerable usage of Syslog(): </p><div style=""margin-left:1em;"" class=""bad"">syslog(LOG_ERR, cmdBuf); <div><i>// the buffer cmdBuff is taking user supplied data. </i></div></div>']"
Buffer Overflow in an API Call,"['Use a language or compiler that performs automatic bounds checking. ', 'Use secure functions not vulnerable to buffer overflow. ', 'If you have to use dangerous functions, make sure that you do boundary checking. ', 'Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Use OS-level preventative functionality. Not a complete solution. ']"
Buffer Overflow in Local Command-Line Utilities,"[""Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow. "", 'Use a language or compiler that performs automatic bounds checking. ', 'Use an abstraction library to abstract away risky APIs. Not a complete solution. ', 'Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ', 'Operational: Use OS-level preventative functionality. Not a complete solution. ', 'Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack. ', 'Do not unnecessarily expose services. ']"
XML Ping of the Death,"['Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval. ', 'Implementation: Provide for network flow control and traffic shaping to control access to the resources. ']"
Exponential Data Expansion,"['Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion. ', 'Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources. ']"
Quadratic Data Expansion,"['Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion. ', 'Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources. ']"
Data Serialization External Entities Blowup,"['This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally. ', 'This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally. ']"
Serialized Data Parameter Blowup,"['This attack may be mitigated completely by using a parser that is not using a vulnerable container. ', 'Mitigation may limit the number of configuration parameters per dataset. ']"
Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"['Design: Perform validation on email header data ', 'Implementation: Implement email filtering solutions on mail server or on MTA, relay server. ', 'Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names ']"
String Format Overflow in syslog(),"['<p>The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): </p><div style=""margin-left:1em;"" class=""good"">syslog(LOG_ERR, ""%s"", cmdBuf); </div><p>The following code shows a vulnerable usage of Syslog(): </p><div style=""margin-left:1em;"" class=""bad"">syslog(LOG_ERR, cmdBuf); <div><i>// the buffer cmdBuff is taking user supplied data. </i></div></div>']"
HTTP Parameter Pollution (HPP),"['Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests ', 'Design: Perform URL encoding ', 'Implementation: Use strict regular expressions in URL rewriting ', 'Implementation: Beware of multiple occurrences of a parameter in a Query String ']"
Flash Parameter Injection,"[""User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies). ""]"
Cross-Site Flashing,"['Implementation: Only allow known URL to be included as remote flash movies in a flash application ', 'Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies. ']"
Checksum Spoofing,[]
Spoofing of UDDI/ebXML Messages,"['Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party. ']"
DNS Rebinding,"['Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites. ', 'Implementation: Reject HTTP request with a malicious Host header. ', 'Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses. ']"
DNS Spoofing,"['Design: Avoid dependence on DNS ', 'Design: Include ""hosts file""/IP address in the application ', 'Implementation: Utilize a .onion domain with Tor support ', 'Implementation: DNSSEC ', 'Implementation: DNS-hold-open ']"
Token Impersonation,[]
Creating a Rogue Certification Authority Certificate,['Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512. ']
Signature Spoofing by Key Theft,"['Restrict access to private keys from non-supervisory accounts ', 'Restrict access to administrative personnel and processes only ', 'Ensure all remote methods are secured ', 'Ensure all services are patched and up to date ']"
Signature Spoofing by Improper Validation,['Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines. ']
Signature Spoofing by Misrepresentation,"['Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks. ']"
Signature Spoofing by Mixing Signed and Unsigned Content,['Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data. ']
Malicious Root Certificate,[]
Signature Spoofing by Key Recreation,['Ensure cryptographic elements have been sufficiently tested for weaknesses. ']
Relative Path Traversal,"['Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content. ', 'Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach. ', 'Implementation: Prefer working without user input when using file system calls ', 'Implementation: Use indirect references rather than actual file names. ', 'Implementation: Use possible permissions on file access when developing and deploying web applications. ']"
Absolute Path Traversal,"['Design: Configure the access control correctly. ', 'Design: Enforce principle of least privilege. ', 'Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. ', 'Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement. ', 'Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. ', 'Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. ', 'Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content. ', 'Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. ', 'Implementation: Use indirect references rather than actual file names. ', 'Implementation: Use possible permissions on file access when developing and deploying web applications. ', 'Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach. ']"
Manipulating Web Input to File System Calls,"['Design: Enforce principle of least privilege. ', 'Design: Ensure all input is validated, and does not contain file system commands ', 'Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. ', 'Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. ', 'Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. ']"
Forced Integer Overflow,"['Use a language or compiler that performs automatic bounds checking. ', ""Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow. "", 'Use an abstraction library to abstract away risky APIs. Not a complete solution. ', 'Always do bound checking before consuming user input data. ']"
Double Encoding,"['Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. ', 'Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. ', 'When client input is required from web-based forms, avoid using the ""GET"" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the ""POST method whenever possible. ', 'Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. ', 'Refer to the RFCs to safely decode URL. ', 'Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. ', 'There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). ']"
Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"['Use an allowlist rather than a denylist input validation. ', 'Canonicalize all data prior to validation. ', 'Take an iterative approach to input validation (defense in depth). ']"
Using Alternative IP Address Encodings,"['Design: Default deny access control policies ', 'Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges) ', 'Implementation: Perform input validation for all remote content. ']"
Exploiting Multiple Input Interpretation Layers,"['An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. ', 'Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system. ']"
Embedding NULL Bytes,['Properly handle the NULL characters supplied as part of user input prior to doing anything with the data. ']
"Postfix, Null Terminate, and Backslash","['Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. ']"
Using Slashes and URL Encoding Combined to Bypass Validation Logic,"['Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. ', 'Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. ', 'When client input is required from web-based forms, avoid using the ""GET"" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the ""POST method whenever possible. ', 'Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. ', 'Refer to the RFCs to safely decode URL. ', 'Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. ', 'There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). ']"
Using Unicode Encoding to Bypass Validation Logic,"['Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII. ', 'Ensure that filtering or input validation is applied to canonical data. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. ']"
URL Encoding,"['Refer to the RFCs to safely decode URL. ', 'Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. ', 'There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). ', 'Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. ', 'Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) ', 'When client input is required from web-based forms, avoid using the ""GET"" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the ""POST method whenever possible. ']"
Using Escaped Slashes in Alternate Encoding,"['Verify that the user-supplied data does not use backslash character to escape malicious characters. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. ', 'Be aware of the threat of alternative method of data encoding. ', 'Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data. ', 'In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. ', 'Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. ', 'Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ']"
Using Slashes in Alternate Encoding,"['Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. ', 'When client input is required from web-based forms, avoid using the ""GET"" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the ""POST method whenever possible. ', 'There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx) ', 'Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) ', 'Test your path decoding process against malicious input. ', 'In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. ', 'Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. ']"
Using UTF-,"['The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters. ', '<p>The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: </p><ul><li>1. Insert a replacement character (e.g. \'?\', \'\'). </li><li>2. Ignore the bytes. </li><li>3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). </li><li>4. Not notice and decode as if the bytes were some similar bit of UTF-8. </li><li>5. Stop decoding and report an error (possibly giving the caller the option to continue). </li></ul><p>It is possible for a decoder to behave in different ways for different types of invalid input. </p><p>RFC 3629 only requires that UTF-8 decoders must not decode ""overlong sequences"" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ""...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."" </p><p>Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft\'s IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. </p><p>To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. </p><p>Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position. </p>', 'For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms). ', ""Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section) "", 'Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. ']"
Symlink Attack,"['Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them. ', 'Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions. ']"
Leveraging/Manipulating Configuration File Search Paths,"['Design: Enforce principle of least privilege ', ""Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program "", 'Implementation: Host integrity monitoring ']"
Search Order Hijacking,"['Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected ', 'Design: Sign system DLLs so that unauthorized DLLs can be detected. ']"
DLL Side-Loading,"['Prevent unknown DLLs from loading through using an allowlist policy. ', 'Patch installed applications as soon as new updates become available. ', 'Properly restrict the location of the software being used. ', 'Use of sxstrace.exe on Windows as well as manual inspection of the manifests. ', 'Require code signing and avoid using relative paths for resources. ']"
Evil Twin Wi-Fi Attack,"['Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios. ']"
Repo Jacking,"['Leverage dedicated package managers instead of directly linking to VCS repositories. ', 'Utilize version pinning and lock files to prevent use of maliciously modified repositories. ', 'Implement ""vendoring"" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously. ', 'Leverage automated tools, such as Checkmarx\'s ""ChainJacking"" tool, to determine susceptibility to Repo Jacking attacks. ']"
DNS Cache Poisoning,"['Configuration: Make sure your DNS servers have been updated to the latest versions ', 'Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet. ', 'Configuration: Disable client side DNS caching. ']"
Web Server Logs Tampering,"['Design: Use input validation before writing to web log ', 'Design: Validate all log data before it is output ']"
Log Injection-Tampering-Forging,"['Carefully control access to physical log files. ', 'Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data. ', 'Use synchronization to control the flow of execution. ', 'Use static analysis tools to identify log forging vulnerabilities. ', 'Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells. ']"
Avoid Security Tool Identification by Adding Data,[]
Cause Web Server Misclassification,['Implementation: Server routines should be determined by content not determined by filename or file extension. ']
Adding a Space to a File Extension,['File extensions should be checked to see if non-visible characters are being included. ']
Windows ::DATA Alternate Data Stream,"['Design: Use FAT file systems which do not support Alternate Data Streams. ', 'Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered. ', 'Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations. ']"
Leverage Executable Code in Non-Executable Files,"['Design: Enforce principle of least privilege ', 'Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. ', 'Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. ', 'Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files. ', 'Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute. ']"
ICMP Echo Request Ping,"['Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers. ']"
ICMP Address Mask Request,[]
Timestamp Request,[]
ICMP Information Request,[]
TCP ACK Ping,['Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection. ']
UDP Ping,['Configure your firewall to block egress ICMP messages. ']
TCP SYN Ping,[]
WiFi MAC Address Tracking,"['Automatic randomization of WiFi MAC addresses ', 'Frequent changing of handset and retransmission device ']"
WiFi SSID Tracking,"['Do not enable the feature of ""Hidden SSIDs"" (also known as ""Network Cloaking"") this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently. ', 'Frequently change the SSID to new and unrelated values ']"
Cellular Broadcast Message Request,['Frequent changing of mobile number. ']
Signal Strength Tracking,[]
TCP SYN Scan,[]
TCP Connect Scan,['Employ a robust network defense posture that includes an IDS/IPS system. ']
TCP FIN Scan,"['FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them. ']"
TCP Xmas Scan,['Employ a robust network defensive posture that includes a managed IDS/IPS. ']
TCP Null Scan,['Employ a robust network defensive posture that includes a managed IDS/IPS. ']
TCP ACK Scan,[]
TCP Window Scan,[]
TCP RPC Scan,"['Typically, an IDS/IPS system is very effective against this type of attack. ']"
UDP Scan,"['Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information. ', 'UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages. ']"
Enumerate Mail Exchange (MX) Records,[]
DNS Zone Transfers,[]
Traceroute Route Enumeration,[]
Identify Shared Files/Directories on System,"['Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools. ']"
Explore for Predictable Temporary File Names,[]
Security Software Footprinting,['Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist. ']
AJAX Footprinting,"['Design: Use browser technologies that do not allow client side scripting. ', 'Implementation: Perform input validation for all remote content. ']"
Flash File Overlay,[]
iFrame Overlay,"['Configuration: Disable iFrames in the Web browser. ', 'Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks. ', 'Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames. ']"
Cross Frame Scripting (XFS),"['Avoid clicking on untrusted links. ', 'Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame. ']"
Credential Prompt Impersonation,"['The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help. ']"
PHP Local File Inclusion,[]
Inclusion of Code in Existing Process,"['Prevent unknown or malicious software from loading through using an allowlist policy. ', 'Properly restrict the location of the software being used. ', 'Leverage security kernel modules providing advanced access control and process restrictions like SELinux. ', 'Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows. ', 'Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux. ', 'Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows. ', 'Monitor processes and command-line arguments for unknown behavior related to code injection. ']"
Root/Jailbreak Detection Evasion via Hooking,"['Ensure mobile applications are signed appropriately to avoid code inclusion via hooking. ', ""Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods. "", ""Inspect the application's stack trace for suspicious method calls. "", 'Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods. ', ""For iOS applications, ensure application methods do not originate from outside of Apple's SDK. ""]"
Server Side Include (SSI) Injection,"['Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them ', 'All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive ', 'Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead ']"
PHP Remote File Inclusion,"['Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Only allow known files to be included (allowlist) ', 'Implementation: Make use of indirect references passed in URL parameters instead of file names ', 'Configuration: Ensure that remote scripts cannot be include in the ""include"" or ""require"" PHP directives ']"
WebView Injection,['The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed. ']
Modification of Registry Run Keys,['Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist. ']
Modification of Windows Service Configuration,['Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation. ']
Poison Web Service Registry,"['Design: Enforce principle of least privilege ', 'Design: Harden registry server and file access permissions ', 'Implementation: Implement communications to and from the registry using secure protocols ']"
XML Schema Poisoning,"['Design: Protect the schema against unauthorized modification. ', 'Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification. ', 'Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification. ']"
Malicious Automated Software Update via Redirection,[]
Malicious Manual Software Update,['Only accept software updates from an official source. ']
Rooting SIM Cards,['Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA. ']
Malicious Automated Software Update via Spoofing,[]
Reverse Engineer an Executable to Expose Assumed Hidden Functionality,[]
Read Sensitive Constants Within an Executable,[]
Lifting Sensitive Data Embedded in Cache,[]
Retrieve Embedded Sensitive Data,[]
Analysis of Packet Timing and Sizes,['Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing. ']
Electromagnetic Side-Channel Attack,"['Utilize side-channel resistant implementations of all crypto algorithms. ', 'Strong physical security of all devices that contain secret key information. (even when devices are not in use) ']"
Compromising Emanations Attack,['None are known. ']
Weakening of Cellular Encryption,"['Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption. ', 'Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption. ']"
IP ID Sequencing Probe,[]
IP 'ID' Echoed Byte-Order Probe,[]
IP (DF) 'Don't Fragment Bit' Echoing Probe,[]
TCP Timestamp Probe,[]
TCP Sequence Number Probe,[]
TCP (ISN) Greatest Common Divisor Probe,[]
TCP (ISN) Counter Rate Probe,[]
TCP (ISN) Sequence Predictability Probe,[]
TCP Congestion Control Flag (ECN) Probe,[]
TCP Initial Window Size Probe,[]
TCP Options Probe,[]
TCP 'RST' Flag Checksum Probe,[]
ICMP Error Message Quoting Probe,[]
ICMP Error Message Echoing Integrity Probe,[]
ICMP IP Total Length Field Probe,[]
ICMP IP 'ID' Field Error Message Probe,[]
Web Application Fingerprinting,"['Implementation: Obfuscate server fields of HTTP response. ', 'Implementation: Hide inner ordering of HTTP response header. ', 'Implementation: Customizing HTTP error codes such as 404 or 500. ', 'Implementation: Hide URL file extension. ', 'Implementation: Hide HTTP response header software information filed. ', ""Implementation: Hide cookie's software information filed. "", 'Implementation: Appropriately deal with error messages. ', ""Implementation: Obfuscate database type in Database API's error message. ""]"
Scanning for Vulnerable Software,[]
Browser Fingerprinting,['Configuration: Disable Java Script in the browser ']
DOM-Based XSS,"['Use browser technologies that do not allow client-side scripting. ', 'Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. ', 'Ensure that all user-supplied input is validated before use. ']"
XSS Targeting Non-Script Elements,"['In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered. ', 'All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed. ']"
XSS Targeting Error Pages,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Using Alternate Syntax,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
XSS Targeting HTML Attributes,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Targeting URI Placeholders,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement. ', 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
XSS Using Doubled Characters,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and sanitize all user supplied fields. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Using Invalid Characters,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Through HTTP Query Strings,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', ""Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "", 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Session tokens for specific host ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ', 'Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode ']"
XSS Through HTTP Headers,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', ""Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "", 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Perform input validation for all remote content. ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Session tokens for specific host ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
Reflected XSS,"['Use browser technologies that do not allow client-side scripting. ', 'Utilize strict type, character, and encoding enforcement. ', 'Ensure that all user-supplied input is validated before use. ']"
XSS Targeting Non-Script Elements,"['In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered. ', 'All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed. ']"
XSS Targeting Error Pages,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Using Alternate Syntax,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
XSS Targeting HTML Attributes,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Targeting URI Placeholders,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement. ', 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
XSS Using Doubled Characters,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and sanitize all user supplied fields. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Using Invalid Characters,"['Design: Use libraries and templates that minimize unfiltered input. ', 'Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations. ', 'Implementation: The victim should configure the browser to minimize active content from untrusted sources. ']"
XSS Through HTTP Query Strings,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', ""Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "", 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Perform input validation for all remote content, including remote and user-generated content ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Session tokens for specific host ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ', 'Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode ']"
XSS Through HTTP Headers,"['Design: Use browser technologies that do not allow client side scripting. ', 'Design: Utilize strict type, character, and encoding enforcement ', ""Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "", 'Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. ', 'Implementation: Perform input validation for all remote content. ', 'Implementation: Perform output validation for all remote content. ', 'Implementation: Disable scripting languages such as JavaScript in browser ', 'Implementation: Session tokens for specific host ', 'Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. ']"
Stored XSS,"['Use browser technologies that do not allow client-side scripting. ', 'Utilize strict type, character, and encoding enforcement. ', 'Ensure that all user-supplied input is validated before being stored. ']"
XSS Using MIME Type Mismatch,[]
DTD Injection,"['Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion. ', 'Implementation: Disallow the inclusion of DTDs as part of incoming messages. ', 'Implementation: Use XML parsing tools that protect against DTD attacks. ']"
XPath Injection,"[""Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions. "", 'Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. ', 'Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application. ']"
XQuery Injection,"['Design: Perform input allowlist validation on all XML input ', 'Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL. ']"
Command Line Execution through SQL Injection,"['Disable MSSQL xp_cmdshell directive on the database ', 'Properly validate the data (syntactically and semantically) before writing it to the database. ', 'Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument). ']"
Object Relational Mapping Injection,"['Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework ', 'Ensure to keep up to date with security relevant updates to the persistence framework used within your application. ']"
SQL Injection through SOAP Parameter Tampering,"['Properly validate and sanitize/reject user input at the service provider. ', ""Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. "", 'At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly. ']"
Expanding Control over the Operating System from the Database,"['Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection ', 'Configuration: Ensure that the DBMS is patched with the latest security patches ', 'Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS ', 'Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user ', 'Usage: Do not use the DBMS machine for anything else other than the database ', 'Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host. ', 'Usage: Use an intrusion detection system to monitor network connections and logs on the database host. ', 'Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised ']"
Blind SQL Injection,"['Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. ', ""Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. ""]"
HTTP Request Splitting,"['Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies. ', 'Configuration: front-end HTTP agents notice ambiguous requests. ', 'Configuration: back-end HTTP agents reject ambiguous requests and close the network connection. ', 'Configuration: Disable reuse of back-end connections. ', 'Configuration: Use HTTP/2 for back-end connections. ', 'Configuration: Use the same web server software for front-end and back-end server. ', 'Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses. ', 'Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers) ', 'Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process. ', 'Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input. ']"
HTTP Response Smuggling,"['Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies. ', 'Configuration: front-end HTTP agents notice ambiguous requests. ', 'Configuration: back-end HTTP agents reject ambiguous requests and close the network connection. ', 'Configuration: Disable reuse of back-end connections. ', 'Configuration: Use HTTP/2 for back-end connections. ', 'Configuration: Use the same web server software for front-end and back-end server. ', 'Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses. ', 'Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both. ', 'Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers. ', 'Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: <ul><li>Headers with no space before the value chunked </li><li>Headers with extra spaces </li><li>Headers beginning with trailing characters </li><li>Headers providing a value chunk instead of chunked (the server normalizes this as chunked encoding) </li><li>Headers with multiple spaces before the value chunked </li><li>Headers with quoted values (whether single or double quotations) </li><li>Headers with CRLF characters before the value chunked </li><li>Values with invalid characters </li></ul>', 'Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers) ', 'Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process. ', 'Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input. ']"
HTTP Verb Tampering,"['Design: Ensure that only legitimate HTTP verbs are allowed. ', 'Design: Do not use HTTP verbs as factors in access decisions. ']"
HTTP Request Smuggling,"['Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies. ', 'Configuration: front-end HTTP agents notice ambiguous requests. ', 'Configuration: back-end HTTP agents reject ambiguous requests and close the network connection. ', 'Configuration: Disable reuse of back-end connections. ', 'Configuration: Use HTTP/2 for back-end connections. ', 'Configuration: Use the same web server software for front-end and back-end server. ', 'Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses. ', 'Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both. ', 'Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers. ', 'Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: <ul><li>Headers with no space before the value chunked </li><li>Headers with extra spaces </li><li>Headers beginning with trailing characters </li><li>Headers providing a value chunk instead of chunked (the server normalizes this as chunked encoding) </li><li>Headers with multiple spaces before the value chunked </li><li>Headers with quoted values (whether single or double quotations) </li><li>Headers with CRLF characters before the value chunked </li><li>Values with invalid characters </li></ul>', 'Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers) ', 'Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process. ', 'Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input. ']"
HTTP Response Splitting,"['Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies. ', 'Configuration: front-end HTTP agents notice ambiguous requests. ', 'Configuration: back-end HTTP agents reject ambiguous requests and close the network connection. ', 'Configuration: Disable reuse of back-end connections. ', 'Configuration: Use HTTP/2 for back-end connections. ', 'Configuration: Use the same web server software for front-end and back-end server. ', 'Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses. ', 'Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers) ', 'Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process. ', 'Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input. ']"
Blue Boxing,"['Implementation: Upgrade phone lines. Note this may be prohibitively expensive ', 'Use strong access control such as two factor access control for administrative access to the switch ']"
Exploitation of Thunderbolt Protection Flaws,"['Implementation: Kernel Direct Memory Access Protection ', 'Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface ', 'Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface ', 'Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode ', 'Configuration: Set Security Level to SL3 for Thunderbolt 2 system port ', 'Configuration: Disable PCIe tunneling to set Security Level to SL3 ', 'Configuration: Disable Boot Camp upon MacOS systems ']"
SOAP Manipulation,[]
Harvesting Information via API Event Monitoring,['Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind. ']
Signing Malicious Code,"['Ensure digital certificates are protected and inaccessible by unauthorized uses. ', 'If a digital certificate has been compromised it should be revoked and regenerated. ', 'Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities. ']"
Malicious Logic Inserted Into Product by Authorized Developer,"['Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment. ']"
Malicious Logic Insertion into Product Software via Configuration Management Manipulation,"['Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. ', 'Leverage anti-virus products to detect and quarantine software with known virus. ']"
Malicious Logic Insertion into Product via Inclusion of Third-Party Component,"['Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment. ', ""Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment. ""]"
Altered Installed BIOS,"['Deploy strong code integrity policies to allow only authorized apps to run. ', 'Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities. ', 'Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins. ', 'Require SSL for update channels and implement certificate transparency based verification. ', 'Sign update packages and BIOS patches. ', 'Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography. ']"
Open-Source Library Manipulation,[]
Software Development Tools Maliciously Altered,"['Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. ', 'Avoid giving elevated privileges to developers. ']"
Malicious Code Implanted During Chip Programming,"['Utilize DMEAs (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components. ', 'Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software. ', 'Require that provenance of COTS microelectronic components be known whenever procured. ', 'Conduct detailed vendor assessment before acquiring COTS hardware. ']"
Developer Signing Maliciously Altered Software,"['Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools. ', 'Employ intrusion detection and malware detection capabilities on IDE systems where feasible. ']"
System Build Data Maliciously Altered,"['Implement configuration management security practices that protect the integrity of software and associated data. ', 'Monitor and control access to the configuration management system. ', 'Harden centralized repositories against attack. ', 'Establish acceptance criteria for configuration management check-in to assure integrity. ', 'Plan for and audit the security of configuration management administration processes. ', 'Maintain configuration control over operational systems. ']"
Embed Virus into DLL,['Leverage anti-virus products to detect and quarantine software with known virus. ']
Altered Component Firmware,"['Leverage hardware components known to not be susceptible to these types of attacks. ', 'Implement hardware RAID infrastructure. ']"
USB Memory Attacks,"['Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself. ', 'Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures. ', 'Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist. ']"
Flash Memory Attacks,[]
Install New Service,['Limit privileges of user accounts so new service creation can only be performed by authorized administrators. ']
Modify Existing Service,['Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently. ']
Install Rootkit,['Prevent adversary access to privileged accounts necessary to install rootkits. ']
Replace File Extension Handlers,['Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators. ']
Replace Trusted Executable,[]
Run Software at Logon,['Restrict write access to logon scripts to necessary administrators. ']
Replace Winlogon Helper DLL,"['Changes to registry entries in ""HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify"" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious. ']"
Install Malicious Extension,"['Only install extensions/plugins from official/verifiable sources. ', 'Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin. ', 'Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date. ', 'Implement an extension/plugin allow list, based on the given security policy. ', 'If applicable, confirm extensions/plugins are properly signed by the official developers. ', 'For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background. ']"
Kerberoasting,"['Monitor system and domain logs for abnormal access. ', 'Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time. ', 'Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more. ', 'Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible. ']"
Use of Captured Tickets (Pass The Ticket),"['Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them. ', 'Monitor system and domain logs for abnormal access. ']"
Windows Admin Shares with Stolen Credentials,"['Do not reuse local administrator account credentials across systems. ', 'Deny remote use of local admin credentials to log into domain systems. ', 'Do not allow accounts to be a local administrator on more than one system. ']"
Use of Captured Hashes (Pass The Hash),"['Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems. ', 'Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. ', 'Monitor system and domain logs for abnormal credential access. ', 'Create a strong password policy and ensure that your system enforces this policy. ', 'Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain. ']"
TCP RST Injection,[]
BGP Route Disabling,"['Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained. ', 'Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography. ']"
DNS Blocking,"['Hard Coded Alternate DNS server in applications ', 'Avoid dependence on DNS ', 'Include ""hosts file""/IP address in the application. ', 'Ensure best practices with respect to communications channel protections. ', 'Use a .onion domain with Tor support ']"
IP Address Blocking,['Have a large pool of backup IPs built into the application and support proxy capability in the application. ']
Block Access to Libraries,['Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion. ']
Spoof Version Control System Commit Metadata,"['Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged. ', 'Reference vulnerability databases to determine if the software contains known vulnerabilities. ', 'Only download open-source software from reputable hosting sites or package managers. ', 'Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the ""Verified"" status and for developers leveraging ""Vigilant Mode"" (GitHub) or similar modes. ', 'After downloading open-source software, ensure integrity values have not changed. ', 'Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously. ']"
StarJacking,"['Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged. ', 'Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference. ', 'Reference vulnerability databases to determine if the software contains known vulnerabilities. ', 'Only download open-source packages from reputable package managers. ', 'After downloading open-source packages, ensure integrity values have not changed. ', 'Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously. ']"
Exploitation of Improperly Configured or Implemented Memory Protections,"['Ensure that protected and unprotected memory ranges are isolated and do not overlap. ', 'If memory regions must overlap, leverage memory priority schemes if memory regions can overlap. ', 'Ensure that original and mirrored memory regions apply the same protections. ', 'Ensure immutable code or data is programmed into ROM or write-once memory. ']"
Exploitation of Improperly Controlled Registers,"['Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design. ', 'Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses. ', 'Test security lock programming flow in both pre-silicon and post-silicon environments. ', 'Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros. ', 'Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent. ']"
Exploitation of Improperly Controlled Hardware Security Identifiers,"['Review generation of security identifiers for design inconsistencies and common weaknesses. ', 'Review security identifier decoders for design inconsistencies and common weaknesses. ', 'Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments. ']"
Exploitation of Improperly Configured or Implemented Memory Protections,"['Ensure that protected and unprotected memory ranges are isolated and do not overlap. ', 'If memory regions must overlap, leverage memory priority schemes if memory regions can overlap. ', 'Ensure that original and mirrored memory regions apply the same protections. ', 'Ensure immutable code or data is programmed into ROM or write-once memory. ']"
Exploitation of Improperly Controlled Registers,"['Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design. ', 'Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses. ', 'Test security lock programming flow in both pre-silicon and post-silicon environments. ', 'Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros. ', 'Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent. ']"
Exploitation of Improperly Controlled Hardware Security Identifiers,"['Review generation of security identifiers for design inconsistencies and common weaknesses. ', 'Review security identifier decoders for design inconsistencies and common weaknesses. ', 'Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments. ']"
Cellular Rogue Base Station,['Passively monitor cellular network connection for real-time threat detection and logging for manual review. ']
Hardware Component Substitution During Baselining,"['Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time. ', 'Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist. ']"
Infiltration of Hardware Development Environment,"['Verify software downloads and updates to ensure they have not been modified be adversaries ', 'Leverage antivirus tools to detect known malware ', 'Do not download software from untrusted sources ', 'Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks ']"
ASIC With Malicious Functionality,[]
Hardware Design Specifications Are Altered,"['Digitize documents and cryptographically sign them to verify authenticity. ', 'Password protect documents and make them read-only for unauthorized users. ', 'Avoid emailing important documents and configurations. ', 'Ensure deleted files are actually deleted. ', 'Maintain backups of the document for recovery and verification. ', 'Separate need-to-know information from system configuration information depending on the user. ']"
Requirements for ASIC Functionality Maliciously Altered,"['Utilize DMEAs (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components. ', 'Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design. ', 'Require that provenance of COTS microelectronic components be known whenever procured. ', 'Conduct detailed vendor assessment before acquiring COTS hardware. ']"
Design for FPGA Maliciously Altered,"['Utilize DMEA�s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components. ', 'Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips. ', 'Require that provenance of COTS microelectronic components be known whenever procured. ', 'Conduct detailed vendor assessment before acquiring COTS hardware. ']"
Bypassing ATA Password Security,"['Avoid using ATA password security when possible. ', 'Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive. ', 'Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption. ']"
Hardware Component Substitution,[]
Provide Counterfeit Component,"['There are various methods to detect if the component is a counterfeit. See section II of [<a href=""#REF-703"">REF-703</a>] for many techniques. ']"
Malicious Gray Market Hardware,"['Purchase only from authorized resellers. ', 'Validate serial numbers from multiple sources ']"
Server Motherboard Compromise,"['Purchase IT systems, components and parts from government approved vendors whenever possible. ', 'Establish diversity among suppliers. ', 'Conduct rigorous threat assessments of suppliers. ', 'Require that Bills of Material (BoM) for critical parts and components be certified. ', 'Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements. ', 'Establish trusted supplier networks. ']"
Disabling Network Hardware,['Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems.. ']
Accessing/Intercepting/Modifying HTTP Cookies,"['Design: Use input validation for cookies ', 'Design: Generate and validate MAC for cookies ', 'Implementation: Use SSL/TLS to protect cookie in transit ', 'Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software. ']"
Cellular Traffic Intercept,"['Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter. ']"
Carry-Off GPS Attack,[]
Terrestrial Jamming,[]
Cellular Rogue Base Station,['Passively monitor cellular network connection for real-time threat detection and logging for manual review. ']
Padding Oracle Crypto Attack,"['Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption ', 'Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption. ']"
Cryptanalysis of Cellular Encryption,"['Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption. ', 'Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption. ']"
Orbital Jamming,[]
Wi-Fi Jamming,"['Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi. ']"
Cellular Jamming,"['Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed. ']"
Infiltration of Software Development Environment,"['Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware. ']"
Hardware Component Substitution During Baselining,"['Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time. ', 'Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist. ']"
Counterfeit Hardware Component Inserted During Product Assembly,"['Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time. ', 'Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist. ']"
Infiltration of Hardware Development Environment,"['Verify software downloads and updates to ensure they have not been modified be adversaries ', 'Leverage antivirus tools to detect known malware ', 'Do not download software from untrusted sources ', 'Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks ']"
ASIC With Malicious Functionality,[]
Documentation Alteration to Circumvent Dial-down,"['Digitize documents and cryptographically sign them to verify authenticity. ', 'Password protect documents and make them read-only for unauthorized users. ', 'Avoid emailing important documents and configurations. ', 'Ensure deleted files are actually deleted. ', 'Maintain backups of the document for recovery and verification. ']"
Documentation Alteration to Produce Under-performing Systems,"['Digitize documents and cryptographically sign them to verify authenticity. ', 'Password protect documents and make them read-only for unauthorized users. ', 'Avoid emailing important documents and configurations. ', 'Ensure deleted files are actually deleted. ', 'Maintain backups of the document for recovery and verification. ', 'Separate need-to-know information from system configuration information depending on the user. ']"
Documentation Alteration to Cause Errors in System Design,"['Digitize documents and cryptographically sign them to verify authenticity. ', 'Password protect documents and make them read-only for unauthorized users. ', 'Avoid emailing important documents and configurations. ', 'Ensure deleted files are actually deleted. ', 'Maintain multiple instances of the document across different privileged users for recovery and verification. ']"
Hardware Design Specifications Are Altered,"['Digitize documents and cryptographically sign them to verify authenticity. ', 'Password protect documents and make them read-only for unauthorized users. ', 'Avoid emailing important documents and configurations. ', 'Ensure deleted files are actually deleted. ', 'Maintain backups of the document for recovery and verification. ', 'Separate need-to-know information from system configuration information depending on the user. ']"
Requirements for ASIC Functionality Maliciously Altered,"['Utilize DMEAs (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components. ', 'Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design. ', 'Require that provenance of COTS microelectronic components be known whenever procured. ', 'Conduct detailed vendor assessment before acquiring COTS hardware. ']"
Design for FPGA Maliciously Altered,"['Utilize DMEAs (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components. ', 'Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips. ', 'Require that provenance of COTS microelectronic components be known whenever procured. ', 'Conduct detailed vendor assessment before acquiring COTS hardware. ']"
Bypassing ATA Password Security,"['Avoid using ATA password security when possible. ', 'Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive. ', 'Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption. ']"
Hardware Component Substitution,[]
Provide Counterfeit Component,"['There are various methods to detect if the component is a counterfeit. See section II of [<a href=""#REF-703"">REF-703</a>] for many techniques. ']"
Malicious Gray Market Hardware,"['Purchase only from authorized resellers. ', 'Validate serial numbers from multiple sources ']"
Server Motherboard Compromise,"['Purchase IT systems, components and parts from government approved vendors whenever possible. ', 'Establish diversity among suppliers. ', 'Conduct rigorous threat assessments of suppliers. ', 'Require that Bills of Material (BoM) for critical parts and components be certified. ', 'Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements. ', 'Establish trusted supplier networks. ']"
StarJacking,"['Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged. ', 'Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference. ', 'Reference vulnerability databases to determine if the software contains known vulnerabilities. ', 'Only download open-source packages from reputable package managers. ', 'After downloading open-source packages, ensure integrity values have not changed. ', 'Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously. ']"
Counterfeit Websites,[]
Counterfeit Organizations,[]
Spear Phishing,"['Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind. ']"
Mobile Phishing,"[""Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind. ""]"
Voice Phishing,"['Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem. ']"
Scheme Squatting,"['The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible. ']"
BitSquatting,"['Authenticate all servers and perform redundant checks when using DNS hostnames. ', 'When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults. ']"
TypoSquatting,"['Authenticate all servers and perform redundant checks when using DNS hostnames. ', 'Purchase potential TypoSquatted domains and forward to legitimate domain. ']"
SoundSquatting,"['Authenticate all servers and perform redundant checks when using DNS hostnames. ', 'Purchase potential SoundSquatted domains and forward to legitimate domain. ']"
Homograph Attack via Homoglyphs,"['Authenticate all servers and perform redundant checks when using DNS hostnames. ', 'Utilize browsers that can warn users if URLs contain characters from different character sets. ']"
Bluetooth Impersonation AttackS (BIAS),"['Disable Bluetooth in public places. ', 'Verify incoming Bluetooth connections; do not automatically trust. ', 'Change default PIN passwords and always use one when connecting. ']"
Pretexting via Customer Service,[]
Pretexting via Tech Support,[]
Pretexting via Delivery Person,[]
Pretexting via Phone,[]
Pretexting via Customer Service,[]
Pretexting via Tech Support,[]
Pretexting via Delivery Person,[]
Pretexting via Phone,[]
Influence Perception of Reciprocation,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ']"
Influence Perception of Scarcity,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ']"
Influence Perception of Authority,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ']"
Influence Perception of Commitment and Consistency,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ', 'Individuals should avoid complying with suspicious requests. ']"
Influence Perception of Liking,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ']"
Influence Perception of Consensus or Social Proof,"['An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks. ']"
Influence via Modes of Thinking,[]
Target Influence via Eye Cues,[]
Target Influence via The Human Buffer Overflow,[]
Target Influence via Interview and Interrogation,[]
Target Influence via Instant Rapport,[]
DNS Domain Seizure,[]
Dumpster Diving,[]
Shoulder Surfing,"['Be mindful of your surroundings when discussing or viewing sensitive information in public areas. ', 'Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information. ']"
Lock Bumping,[]
Lock Picking,[]
Using a Snap Gun Lock to Force a Lock,[]
Cloning Magnetic Strip Cards,[]
Magnetic Strip Card Brute Force Attacks,[]
Cloning RFID Cards or Chips,[]
RFID Chip Deactivation or Destruction,[]
Smudge Attack,['Strong physical security of the device. ']
